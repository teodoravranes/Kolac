#include <iostream>

using namespace std;

enum TipPreliva {COKOLADNI, COKOLADNI_SA_SLAGOM};

class Preliv
{
private:
TipPreliva tip;

public:
Preliv() {tip=COKOLADNI;}
Preliv(TipPreliva kp) {tip=kp;}

bool dodajSlag()
{
if(tip==COKOLADNI)
{
tip = COKOLADNI_SA_SLAGOM;
return true;
} else {
return false;
}
}

bool ukloniSlag()
{
if(tip==COKOLADNI_SA_SLAGOM)
{
tip = COKOLADNI;
return true;
} else {
return false;
}
}

TipPreliva getPreliv()const {return tip;}
void IspisiPreliv(const Preliv &p)
{
if(p.getPreliv() == 0)
{
cout << "------------" <<endl;
cout << "COKOLADNI"<<endl;
cout << "------------"<<endl;
}else{
cout << "------------" <<endl;
cout << "COKOLADNI SA SLAGOM"<<endl;
cout << "------------"<<endl;
}
}
};

enum KolacStanje {U_PRIPREMI, PECE_SE, ZAGOREO, PRIPREMLJEN};

class Kolac 
{
private:
KolacStanje stanje;
int temperatura;
Preliv preliv;

public:
Kolac() {stanje = U_PRIPREMI; temperatura=20; preliv = COKOLADNI;}
Kolac(const Kolac &copy) {stanje = copy.stanje; temperatura = copy.temperatura; preliv = copy.preliv;}

KolacStanje getStanje()const {return stanje;}
int getTemperatura()const {return temperatura;}
Preliv getPreliv()const {return preliv;}

bool StaviDaSePece()
{
if(stanje==U_PRIPREMI && preliv.getPreliv()==COKOLADNI)
{
stanje=PECE_SE;
temperatura+=20;
return true;
}else{
return false;
}
}

bool ispeciKolac()
{
if(stanje==PECE_SE)
{
stanje=U_PRIPREMI;
temperatura=20;
return true;
}else{
return false;
}

